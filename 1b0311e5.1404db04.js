(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{167:function(e,t,r){"use strict";r.d(t,"a",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(r),m=n,f=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return r?a.a.createElement(f,c(c({ref:t},s),{},{components:r})):a.a.createElement(f,c({ref:t},s))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},77:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return u}));var n=r(3),a=r(7),o=(r(0),r(167)),i={id:"dual_color_6_suits",title:"Specific Conventions for Dual-Color (6 Suits)"},c={unversionedId:"variant_specific/dual_color_6_suits",id:"variant_specific/dual_color_6_suits",isDocsHomePage:!1,title:"Specific Conventions for Dual-Color (6 Suits)",description:'These conventions apply to the "Dual-Color (6 Suits)" variant.',source:"@site/docs\\variant_specific\\dual_color_6_suits.md",slug:"/variant_specific/dual_color_6_suits",permalink:"/docs/variant_specific/dual_color_6_suits",editUrl:"https://github.com/Zamiell/hanabi-conventions/edit/main/website/docs/variant_specific/dual_color_6_suits.md",version:"current"},l=[{value:"The Negative Prompt",id:"the-negative-prompt",children:[]},{value:"Order Chop Move Change",id:"order-chop-move-change",children:[]}],s={toc:l};function u(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.a)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(o.a)("p",null,'These conventions apply to the "Dual-Color (6 Suits)" variant.'),Object(o.a)("br",null),Object(o.a)("h3",{id:"the-negative-prompt"},"The Negative Prompt"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"In this variant, since negative color information conveys just as much information as positive color information, you should include that when deciding which card to play into a ",Object(o.a)("em",{parentName:"li"},"Prompt"),"."),Object(o.a)("li",{parentName:"ul"},"For example:",Object(o.a)("ul",{parentName:"li"},Object(o.a)("li",{parentName:"ul"},"Alice has a red card in slot 1 and a red card in slot 2."),Object(o.a)("li",{parentName:"ul"},"Alice is ",Object(o.a)("em",{parentName:"li"},"Prompted")," for a mahogany 2. (Mahogany is composed of red and black.)"),Object(o.a)("li",{parentName:"ul"},"Normally, Alice would play slot 1, since ",Object(o.a)("em",{parentName:"li"},"Prompts")," promise the left-most card."),Object(o.a)("li",{parentName:"ul"},"However, Alice's slot 1 card has no negative clues, and her slot 2 card has a negative yellow clue."),Object(o.a)("li",{parentName:"ul"},"Thus, this is a ",Object(o.a)("em",{parentName:"li"},"Negative Prompt")," and Alice plays slot 2 instead of slot 1.")))),Object(o.a)("h3",{id:"order-chop-move-change"},"Order Chop Move Change"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"Normally, ",Object(o.a)("em",{parentName:"li"},"Order Chop Moves"),', are "turned off" when two different 1\'s have different positive clues on them.',Object(o.a)("ul",{parentName:"li"},Object(o.a)("li",{parentName:"ul"},'For example, Order Chop Moves would be "turned off" in the situation where Alice has one 1 has a positive 1 clue on it, and Alice has another 1 with a positive 1 clue on it and a positive red clue on it.'))),Object(o.a)("li",{parentName:"ul"},'In the "Dual Color (6 Suit)" variant, ',Object(o.a)("em",{parentName:"li"},"Order Chop Moves")," are never turned off when there are two different 1's, regardless of different positive or negative color clues on them."),Object(o.a)("li",{parentName:"ul"},'The only exception is when the exact identity of the 1 is known (e.g. from being completely "filled in"). In this situation, ',Object(o.a)("em",{parentName:"li"},"Order Chop Moves")," are turned off.")))}u.isMDXComponent=!0}}]);