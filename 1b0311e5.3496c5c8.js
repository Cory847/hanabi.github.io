(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{169:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return n?o.a.createElement(b,c(c({ref:t},s),{},{components:n})):o.a.createElement(b,c({ref:t},s))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(7),a=(n(0),n(169)),i={id:"dual_color_6_suits",title:"Specific Conventions for Dual-Color (6 Suits)"},c={unversionedId:"variant_specific/dual_color_6_suits",id:"variant_specific/dual_color_6_suits",isDocsHomePage:!1,title:"Specific Conventions for Dual-Color (6 Suits)",description:'These conventions apply to the "Dual-Color (6 Suits)" variant.',source:"@site/docs\\variant_specific\\dual_color_6_suits.md",slug:"/variant_specific/dual_color_6_suits",permalink:"/hanabi-conventions/docs/variant_specific/dual_color_6_suits",editUrl:"https://github.com/Zamiell/hanabi-conventions/edit/main/docs/variant_specific/dual_color_6_suits.md",version:"current"},l=[{value:"The Negative Prompt",id:"the-negative-prompt",children:[]},{value:"Order Chop Move Change",id:"order-chop-move-change",children:[]}],s={toc:l};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,'These conventions apply to the "Dual-Color (6 Suits)" variant.'),Object(a.b)("br",null),Object(a.b)("h3",{id:"the-negative-prompt"},"The Negative Prompt"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"In this variant, since negative color information conveys just as much information as positive color information, you should include that when deciding which card to play into a ",Object(a.b)("em",{parentName:"li"},"Prompt"),"."),Object(a.b)("li",{parentName:"ul"},"For example:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Alice has a red card in slot 1 and a red card in slot 2."),Object(a.b)("li",{parentName:"ul"},"Alice is ",Object(a.b)("em",{parentName:"li"},"Prompted")," for a mahogany 2. (Mahogany is composed of red and black.)"),Object(a.b)("li",{parentName:"ul"},"Normally, Alice would play slot 1, since ",Object(a.b)("em",{parentName:"li"},"Prompts")," promise the left-most card."),Object(a.b)("li",{parentName:"ul"},"However, Alice's slot 1 card has no negative clues, and her slot 2 card has a negative yellow clue."),Object(a.b)("li",{parentName:"ul"},"Thus, this is a ",Object(a.b)("em",{parentName:"li"},"Negative Prompt")," and Alice plays slot 2 instead of slot 1.")))),Object(a.b)("h3",{id:"order-chop-move-change"},"Order Chop Move Change"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Normally, ",Object(a.b)("em",{parentName:"li"},"Order Chop Moves"),', are "turned off" when two different 1\'s have different positive clues on them.',Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},'For example, Order Chop Moves would be "turned off" in the situation where Alice has one 1 has a positive 1 clue on it, and Alice has another 1 with a positive 1 clue on it and a positive red clue on it.'))),Object(a.b)("li",{parentName:"ul"},'In the "Dual Color (6 Suit)" variant, ',Object(a.b)("em",{parentName:"li"},"Order Chop Moves")," are never turned off when there are two different 1's, regardless of different positive or negative color clues on them."),Object(a.b)("li",{parentName:"ul"},'The only exception is when the exact identity of the 1 is known (e.g. from being completely "filled in"). In this situation, ',Object(a.b)("em",{parentName:"li"},"Order Chop Moves")," are turned off.")))}u.isMDXComponent=!0}}]);